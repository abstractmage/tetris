{"version":3,"sources":["components/Tetris/components/Cell/index.module.scss","components/Tetris/components/Tetromino/index.module.scss","components/Tetris/components/BoxContainer/index.module.scss","components/Tetris/components/Field/components/Cell/index.module.scss","components/Tetris/components/Button/index.module.scss","components/Tetris/components/Field/index.module.scss","components/Global/index.tsx","components/Tetris/components/Field/components/Cell/index.tsx","components/Tetris/components/Cell/constants.ts","components/Tetris/components/Cell/index.tsx","components/Tetris/binders/Cell/index.tsx","components/Tetris/components/BoxContainer/index.tsx","components/Tetris/components/Button/index.tsx","components/Tetris/components/Field/index.tsx","components/Tetris/components/Tetromino/constants.ts","components/Tetris/components/Tetromino/index.tsx","components/Tetris/store/Button/constants.ts","components/Tetris/store/Button/index.ts","components/Tetris/store/Counter/index.ts","components/Tetris/store/BrickContext/index.ts","components/Tetris/store/Row/index.ts","components/Tetris/store/BrickHeap/index.ts","components/Tetris/store/Cell/index.ts","components/Tetris/store/Field/index.ts","components/Tetris/store/Deferred/index.ts","components/Tetris/store/Interval/index.ts","components/Tetris/store/KeyController/index.ts","components/Tetris/store/Brick/index.ts","components/Tetris/store/Tetromino/index.ts","components/Tetris/store/GameScenario/constants.ts","components/Tetris/store/GameScenario/index.ts","components/Tetris/store/TetrominoGenerator/index.ts","components/Tetris/store/Tetris/index.ts","components/Tetris/store/TetrisStore/index.ts","components/Tetris/index.tsx","reportWebVitals.ts","index.tsx","components/Tetris/index.module.scss"],"names":["module","exports","Global","props","children","Cell","className","style","main","colors","empty","purple","green","red","yellow","lightBlue","orange","blue","defaultProps","color","cn","innerSquare","outerSquare","observer","cell","BoxContainer","text","boxContainer","Button","onClick","Field","types","I","J","L","O","S","T","Z","type","cellColors","Tetromino","inner","range","map","index","states","options","_state","makeAutoObservable","this","autoBind","state","Counter","_numberOfLines","_scores","numberOfNewLines","BrickContext","bricks","size","halfWidth","width","x","Math","ceil","floor","y","height","addingBricks","removingBricks","filter","brick","includes","point","find","Error","constructor","name","checkIfPointIsOutOfRangeLeft","checkIfPointIsOutOfRangeRight","checkIfPointIsOutOfRangeBottom","Row","brickContext","every","checkIfPointIsOutOfRange","checkIfBrickAtPoint","isMovingDownPossible","forEach","setPoint","BrickHeap","length","highestBrick","reduce","maxBrick","filledRows","i","bricksRow","push","values","groupBy","sort","prev","next","row","moveDown","_point","_color","_cells","flat","c","cells","some","Deferred","_resolve","_reject","_promise","Promise","resolve","reject","value","reason","Interval","callback","duration","interval","window","setInterval","clearInterval","KeyController","onArrowLeftPress","onArrowRightPress","onArrowUpPress","onArrowDownPress","handleKeyPress","bind","callbacks","stopListening","document","addEventListener","removeEventListener","e","key","Brick","pivotBrick","createPoints","startPoint","addBricks","nextPoints","getMovingDownNextPoints","isMovingToPointsPossible","getMovingRightNextPoints","getMovingLeftNextPoints","getRotatingRightNextPoints","getRotatingLeftNextPoints","isMovingRightPossible","isMovingLeftPossible","isRotatingRightPossible","isRotatingLeftPossible","pivotPoint","points","brickAtPoint","getBrickByPoint","getRotatedPoint","originPoint","angle","round","cos","PI","sin","GameScenario","falling","numberOfFilledLines","brickHeap","field","tetrominoGenerator","currentTetromino","keyController","pauseDeferred","onRun","onPause","onClearRows","onFinish","a","resume","clear","draw","start","stop","create","promise","currentData","runTetrominoFalling","generateNext","isFilled","startListening","tetromino","setDuration","race","setListeners","rotateRight","moveRight","moveLeft","setCallback","clearRowsIfNeeded","changeColor","rows","getFilledRows","numberOfRows","rowWidth","rightX","leftX","rowBricks","leftBrick","rightBrick","removeBricks","setTimeout","moveToBottom","TetrominoGenerator","_currentData","_nextData","getRandomData","nextData","sample","omit","Tetris","_field","defaultFieldSize","gameScenario","run","pause","TetrisStore","tetris","_button","setState","_counter","incrementLines","nextPieceData","buttonText","scores","numberOfLines","store","useLocalObservable","fieldWrap","center","column","nextPieceBoxContainer","nextPieceBoxContainerInner","nextPiece","fieldText","fieldValue","lines","buttonWrap","button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0e85bff9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Cell_main__174gQ\",\"main_color_empty\":\"Cell_main_color_empty__3tZOJ\",\"innerSquare\":\"Cell_innerSquare__27-FJ\",\"main_color_purple\":\"Cell_main_color_purple__MaL1A\",\"outerSquare\":\"Cell_outerSquare__MFyeX\",\"main_color_green\":\"Cell_main_color_green__TeaLT\",\"main_color_red\":\"Cell_main_color_red__35FyK\",\"main_color_yellow\":\"Cell_main_color_yellow__3Sq6b\",\"main_color_lightBlue\":\"Cell_main_color_lightBlue__38Z9Q\",\"main_color_orange\":\"Cell_main_color_orange__jDpdU\",\"main_color_blue\":\"Cell_main_color_blue__-uZAr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Tetromino_main__M2Mlz\",\"main_type_I\":\"Tetromino_main_type_I__2DM_n\",\"cell\":\"Tetromino_cell__2wPmy\",\"main_type_J\":\"Tetromino_main_type_J__V-85O\",\"main_type_L\":\"Tetromino_main_type_L__2jK0_\",\"main_type_O\":\"Tetromino_main_type_O__2buKK\",\"main_type_S\":\"Tetromino_main_type_S__3BRyZ\",\"main_type_T\":\"Tetromino_main_type_T__1LwSp\",\"main_type_Z\":\"Tetromino_main_type_Z__37gK8\",\"inner\":\"Tetromino_inner__G-oVb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"BoxContainer_main__3zBDO\",\"text\":\"BoxContainer_text__17ql7\",\"boxContainer\":\"BoxContainer_boxContainer__3TAR1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Cell_main__2h-6X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Button_main__2i5Pp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Field_main__1mOG4\"};","import React from 'react';\nimport { GlobalProps } from './types';\nimport './index.module.scss';\n\nexport const Global = (props: GlobalProps) => {\n  const { children } = props;\n  return <>{children}</>;\n};\n","import React from 'react';\nimport { CellProps } from './types';\nimport style from './index.module.scss';\n\nexport const Cell = (props: CellProps) => {\n  const { children } = props;\n  return <div className={style.main}>{children}</div>\n};\n","import { Color } from './types';\n\nexport const colors: { [name in Color]: Color } = {\n  empty: 'empty',\n  purple: 'purple',\n  green: 'green',\n  red: 'red',\n  yellow: 'yellow',\n  lightBlue: 'lightBlue',\n  orange: 'orange',\n  blue: 'blue',\n};\n\nexport const defaultProps = {\n  color: colors.empty,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { defaultProps } from './constants';\nimport { CellProps } from './types';\nimport style from './index.module.scss';\n\nexport const Cell = (props: CellProps) => {\n  const { color } = { ...defaultProps, ...props };\n\n  return <div className={cn(style.main, style[`main_color_${color}`])}>\n    <div className={style.innerSquare} />\n    <div className={style.outerSquare} />\n  </div>\n};\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Cell as FieldCell } from '../../components/Field/components/Cell';\nimport { Cell as CellView } from '../../components/Cell';\nimport { CellProps } from './types';\n\nexport const Cell = observer(function Cell(props: CellProps) {\n  const { cell } = props;\n\n  return (\n    <FieldCell>\n      <CellView color={cell.color} />\n    </FieldCell>\n  )\n});\n","import React from 'react';\nimport { BoxContainerProps } from './types';\nimport style from './index.module.scss';\n\nexport const BoxContainer = (props: BoxContainerProps) => {\n  const { text, children } = props;\n\n  return (\n    <div className={style.main}>\n      {text && <div className={style.text}>{text}</div>}\n      <div className={style.boxContainer}>{children}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ButtonProps } from './types';\nimport style from './index.module.scss';\n\nexport const Button = (props: ButtonProps) => {\n  const { children, onClick } = props;\n  return <div className={style.main} onClick={onClick}>{children}</div>;\n};\n","import React from 'react';\nimport { FieldProps } from './types';\nimport style from './index.module.scss';\n\nexport const Field = (props: FieldProps) => {\n  const { children } = props;\n  return <div className={style.main}>{children}</div>;\n};\n","import { colors as cellColors } from '../Cell/constants';\nimport { Type } from './types';\n\nexport const colors = cellColors;\n\nexport const types: { [name in Type]: Type } = {\n  I: 'I',\n  J: 'J',\n  L: 'L',\n  O: 'O',\n  S: 'S',\n  T: 'T',\n  Z: 'Z',\n};\n\nexport const numberOfCells = 4;\n\nexport const defaultProps = {\n  type: types.I,\n  color: colors.lightBlue,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { range } from 'lodash';\nimport { defaultProps, numberOfCells } from './constants';\nimport { TetrominoProps } from './types';\nimport style from './index.module.scss';\nimport { Cell } from '../Cell';\n\nexport const Tetromino = (props: TetrominoProps) => {\n  const { type, color } = { ...defaultProps, ...props };\n\n  return (\n    <div className={cn(style.main, style[`main_type_${type}`])}>\n      <div className={style.inner}>\n        {range(numberOfCells).map((index) => (\n          <div key={index} className={style.cell}>\n            <Cell color={color} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { State } from './types';\n\nexport const states: { [state in State]: state } = {\n  play: 'play',\n  pause: 'pause',\n  resume: 'resume',\n};\n","import { makeAutoObservable } from 'mobx';\nimport { states } from './constants';\nimport { State } from './types';\n\nexport class Button {\n  private _state: State = states.play;\n\n  readonly onClick: () => void;\n\n  constructor(options: {\n    onClick: () => void;\n  }) {\n    makeAutoObservable(this, {}, { autoBind: true });\n\n    this.onClick = options.onClick;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  setState(state: State) {\n    this._state = state;\n  }\n}","import { makeAutoObservable } from 'mobx';\n\nexport class Counter {\n  private _numberOfLines = 0;\n\n  private _scores = 0;\n\n  constructor() {\n    makeAutoObservable(this, {}, { autoBind: true });\n  }\n\n  get numberOfLines() {\n    return this._numberOfLines;\n  }\n\n  get scores() {\n    return this._scores;\n  }\n\n  incrementLines(numberOfNewLines: number) {\n    this._numberOfLines += numberOfNewLines;\n    \n    if (numberOfNewLines === 1) {\n      this._scores += 100;\n    }\n\n    if (numberOfNewLines === 2) {\n      this._scores += 300;\n    }\n\n    if (numberOfNewLines === 3) {\n      this._scores += 700;\n    }\n\n    if (numberOfNewLines === 4) {\n      this._scores += 1500;\n    }\n  }\n\n  clear() {\n    this._numberOfLines = 0;\n    this._scores = 0;\n  }\n}\n","import { makeAutoObservable } from 'mobx';\nimport { Point, Size } from '../../types';\nimport { Brick } from '../Brick';\nimport { Options } from './types';\n\nexport class BrickContext {\n  bricks: Brick[];\n\n  size: Size;\n\n  constructor(options: Options) {\n    makeAutoObservable(this, {}, { autoBind: true });\n\n    this.bricks = [];\n    this.size = options.size;\n  }\n\n  get startPoint() {\n    const halfWidth = this.size.width / 2;\n    let x = 0;\n\n    if (halfWidth === Math.ceil(halfWidth)) x = halfWidth;\n    else x = Math.floor(halfWidth);\n\n    return { x, y: this.size.height };\n  }\n  \n  addBricks(...addingBricks: Brick[]) {\n    this.bricks = [...this.bricks, ...addingBricks];\n  }\n\n  removeBricks(...removingBricks: Brick[]) {\n    this.bricks = this.bricks.filter((brick) => !removingBricks.includes(brick));\n  }\n\n  clear() {\n    this.bricks = [];\n  }\n\n  checkIfBrickAtPoint(point: Point) {\n    return !!this.bricks.find((brick) => brick.point.x === point.x && brick.point.y === point.y);\n  }\n\n  getBrickByPoint(point: Point) {\n    const brick = this.bricks.find((brick) => brick.point.x === point.x && brick.point.y === point.y) || null;\n\n    if (!brick) {\n      throw new Error(`${this.constructor.name}.getBrickByPoint: no such brick exists`);\n    }\n\n    return brick;\n  }\n\n  checkIfPointIsOutOfRange(point: Point) {\n    return this.checkIfPointIsOutOfRangeLeft(point)\n      || this.checkIfPointIsOutOfRangeRight(point)\n      || this.checkIfPointIsOutOfRangeBottom(point);\n  }\n\n  checkIfPointIsOutOfRangeLeft(point: Point) {\n    return point.x < 0;\n  }\n\n  checkIfPointIsOutOfRangeRight(point: Point) {\n    return point.x > this.size.width - 1;\n  }\n\n  checkIfPointIsOutOfRangeBottom(point: Point) {\n    return point.y < 0;\n  }\n}\n","import { range } from 'lodash';\nimport { Point } from '../../types';\nimport { Brick } from '../Brick';\nimport { BrickContext } from '../BrickContext';\n\nexport class Row {\n  private brickContext: BrickContext;\n\n  private bricks: Brick[];\n\n  constructor(options: {\n    brickContext: BrickContext;\n    bricks: Brick[];\n  }) {\n    this.brickContext = options.brickContext;\n    this.bricks = options.bricks;\n  }\n\n  isMovingDownPossible() {\n    const currentPoints: Point[] = range(this.brickContext.size.width)\n      .map((x) => ({ x, y: this.bricks[0].point.y }));\n\n    return currentPoints.every((point) => {\n      if (this.brickContext.checkIfPointIsOutOfRange({ x: point.x, y: point.y - 1 })) {\n        return false;\n      }\n\n      return !this.brickContext.checkIfBrickAtPoint({ x: point.x, y: point.y - 1 });\n    });\n  }\n\n  moveDown() {\n    if (!this.isMovingDownPossible()) return;\n\n    this.bricks.forEach((brick) => {\n      brick.setPoint({ x: brick.point.x, y: brick.point.y - 1 });\n    });\n  }\n}\n","import { groupBy, values } from 'lodash';\nimport { makeAutoObservable } from 'mobx';\nimport { Brick } from '../Brick';\nimport { BrickContext } from '../BrickContext';\nimport { Row } from '../Row';\nimport { Options } from './types';\n\nexport class BrickHeap {\n  bricks: Brick[];\n\n  private brickContext: BrickContext;\n\n  constructor(options: Options) {\n    makeAutoObservable(this, {}, { autoBind: true });\n\n    this.bricks = [];\n    this.brickContext = options.brickContext;\n  }\n\n  addBricks(...addingBricks: Brick[]) {\n    this.bricks = [...this.bricks, ...addingBricks];\n  }\n\n  removeBricks(...removingBricks: Brick[]) {\n    this.bricks = this.bricks.filter((brick) => !removingBricks.includes(brick));\n  }\n\n  clear() {\n    this.bricks = [];\n  }\n\n  getFilledRows() {\n    if (!this.bricks.length) return [];\n\n    const highestBrick = this.bricks.reduce((maxBrick, brick) => maxBrick.point.y < brick.point.y ? brick : maxBrick);\n    const filledRows = [];\n    \n    for (let i = 0; i <= highestBrick.point.y; i++) {\n      const bricksRow = this.bricks.filter((brick) => brick.point.y === i);\n\n      if (bricksRow.length === this.brickContext.size.width) {\n        filledRows.push(bricksRow);\n      }\n    }\n\n    return filledRows;\n  }\n\n  moveToBottom() {\n    const rows = values(groupBy(this.bricks, 'point.y'))\n      .sort(([prev], [next]) => prev.point.y - next.point.y)\n      .map((bricks) => bricks.sort((prev, next) => prev.point.x - next.point.x))\n      .map((bricks) =>\n        new Row({ brickContext: this.brickContext, bricks: bricks }),\n      );\n\n    rows.forEach((row) => {\n      while (row.isMovingDownPossible()) {\n        row.moveDown();\n      }\n    });\n  }\n}\n","import { makeAutoObservable } from 'mobx';\nimport { colors } from '../../components/Cell/constants';\nimport { Color } from '../../components/Cell/types';\nimport { Point } from '../../types';\nimport { Options } from './types';\n\nexport class Cell {\n  private _point: Point;\n\n  private _color: Color = colors.empty;\n\n  constructor(options: Options) {\n    makeAutoObservable(this, {}, { autoBind: true });\n\n    this._point = options.point;\n  }\n\n  get point() {\n    return this._point;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  changeColor(color: Color) {\n    this._color = color;\n  }\n}\n","import { makeAutoObservable } from 'mobx';\nimport { range } from 'lodash';\nimport { Point, Size } from '../../types';\nimport { Cell } from '../Cell';\nimport { Options } from './types';\nimport { colors } from '../../components/Cell/constants';\n\nexport class Field {\n  private _cells: Cell[];\n\n  private size: Size;\n\n  constructor(options: Options) {\n    makeAutoObservable(this, {}, { autoBind: true });\n\n    this.size = {\n      width: options.width,\n      height: options.height,\n    };\n\n    this._cells = range(options.height).map((y) => range(options.width).map((x) => new Cell({ point: { x, y } }))).flat();\n  }\n\n  get cells() {\n    return this._cells;\n  }\n\n  getCellByPoint(point: Point) {\n    const cell = this._cells.find((c) => c.point.x === point.x && c.point.y === point.y);\n\n    if (!cell) {\n      throw new Error(`${this.constructor.name}: invalid point value provided`);\n    }\n\n    return cell;\n  }\n\n  isFilled() {\n    const startCells = this.cells.filter((cell) =>\n      cell.point.y === this.size.height - 1,\n    );\n\n    return startCells.some((cell) => cell.color !== colors.empty);\n  }\n}\n","export class Deferred<T = void> {\n  private _resolve!: (value: T | PromiseLike<T>) => void;\n\n  private _reject!: (reason?: any) => void;\n  \n  private _promise = new Promise<T>((resolve, reject) => {\n    this._resolve = resolve;\n    this._reject = reject;\n  });\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(value: T) {\n    this._resolve(value);\n  }\n\n  reject(reason?: any) {\n    this._reject(reason);\n  }\n}\n","export class Interval {\n  private callback: (() => void) | null = null;\n\n  private duration = 1000;\n\n  private interval: number | null = null;\n\n  setCallback(callback: (() => void) | null) {\n    this.callback = callback;\n  }\n\n  setDuration(duration: number) {\n    this.duration = duration;\n  }\n\n  start() {\n    this.interval = window.setInterval(() => this.callback?.(), this.duration)\n  }\n\n  stop() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","export class KeyController {\n  private onArrowLeftPress: null | (() => void) = null;\n\n  private onArrowRightPress: null | (() => void) = null;\n\n  private onArrowUpPress: null | (() => void) = null;\n\n  private onArrowDownPress: null | (() => void) = null;\n\n  constructor() {\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  setListeners(callbacks: {\n    onArrowLeftPress: (() => void);\n    onArrowRightPress: (() => void);\n    onArrowUpPress: (() => void);\n    onArrowDownPress: (() => void);\n  }) {\n    this.onArrowLeftPress = callbacks.onArrowLeftPress;\n    this.onArrowRightPress = callbacks.onArrowRightPress;\n    this.onArrowUpPress = callbacks.onArrowUpPress;\n    this.onArrowDownPress = callbacks.onArrowDownPress;\n  }\n\n  startListening() {\n    this.stopListening();\n    document.addEventListener('keydown', this.handleKeyPress)\n  }\n\n  stopListening() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  private handleKeyPress(e: KeyboardEvent) {\n    if (e.key === 'ArrowUp') this.onArrowUpPress?.();\n    if (e.key === 'ArrowDown') this.onArrowDownPress?.();\n    if (e.key === 'ArrowLeft') this.onArrowLeftPress?.();\n    if (e.key === 'ArrowRight') this.onArrowRightPress?.();\n  }\n}","import { makeAutoObservable } from 'mobx';\nimport { Color } from '../../components/Cell/types';\nimport { Point } from '../../types';\nimport { Options } from './types';\n\nexport class Brick {\n  point: Point;\n\n  color: Color;\n\n  constructor(options: Options) {\n    makeAutoObservable(this, {}, { autoBind: true });\n\n    this.point = options.point;\n    this.color = options.color;\n  }\n  \n  setPoint(point: Point) {\n    this.point = point;\n  }\n}","import { makeAutoObservable } from 'mobx';\nimport { types } from '../../components/Tetromino/constants';\nimport { Type } from '../../components/Tetromino/types';\nimport { Point } from '../../types';\nimport { Brick } from '../Brick';\nimport { BrickContext } from '../BrickContext';\nimport { Options } from './types';\n\nexport class Tetromino {\n  bricks: Brick[];\n\n  type: Type;\n\n  private brickContext: BrickContext;\n\n  private pivotBrick!: Brick;\n\n  constructor(options: Options) {\n    makeAutoObservable(this, {}, { autoBind: true });\n\n    this.type = options.type;\n    this.brickContext = options.brickContext;\n    this.bricks = this.createPoints(this.brickContext.startPoint).map((point, i) => {\n      const brick = new Brick({ point, color: options.color });\n      if (i === 0) this.pivotBrick = brick;\n      return brick;\n    });\n\n    this.brickContext.addBricks(...this.bricks);\n  }\n  \n  isMovingDownPossible() {\n    const nextPoints = this.getMovingDownNextPoints();\n    return this.isMovingToPointsPossible(...nextPoints);\n  }\n\n  isMovingRightPossible() {\n    const nextPoints = this.getMovingRightNextPoints();\n    return this.isMovingToPointsPossible(...nextPoints);\n  }\n\n  isMovingLeftPossible() {\n    const nextPoints = this.getMovingLeftNextPoints();\n    return this.isMovingToPointsPossible(...nextPoints);\n  }\n\n  isRotatingRightPossible() {\n    const nextPoints = this.getRotatingRightNextPoints();\n    return this.isMovingToPointsPossible(...nextPoints);\n  }\n\n  isRotatingLeftPossible() {\n    const nextPoints = this.getRotatingLeftNextPoints();\n    return this.isMovingToPointsPossible(...nextPoints);\n  }\n\n  moveDown() {\n    if (!this.isMovingDownPossible()) return;\n    const nextPoints = this.getMovingDownNextPoints();\n    this.bricks.forEach((brick, i) => brick.setPoint(nextPoints[i]));\n  }\n\n  moveRight() {\n    if (!this.isMovingRightPossible()) return;\n    const nextPoints = this.getMovingRightNextPoints();\n    this.bricks.forEach((brick, i) => brick.setPoint(nextPoints[i]));\n  }\n\n  moveLeft() {\n    if (!this.isMovingLeftPossible()) return;\n    const nextPoints = this.getMovingLeftNextPoints();\n    this.bricks.forEach((brick, i) => brick.setPoint(nextPoints[i]));\n  }\n\n  rotateRight() {\n    if (!this.isRotatingRightPossible() || this.type === types.O) return;\n    const nextPoints = this.getRotatingRightNextPoints();\n    this.bricks.forEach((brick, i) => brick.setPoint(nextPoints[i]));\n  }\n\n  rotateLeft() {\n    if (!this.isRotatingLeftPossible() || this.type === types.O) return;\n    const nextPoints = this.getRotatingLeftNextPoints();\n    this.bricks.forEach((brick, i) => brick.setPoint(nextPoints[i]));\n  }\n\n  private createPoints(pivotPoint: Point) {\n    if (this.type === 'I') {\n      return [\n        pivotPoint,\n        { x: pivotPoint.x - 2, y: pivotPoint.y },\n        { x: pivotPoint.x - 1, y: pivotPoint.y },\n        { x: pivotPoint.x + 1, y: pivotPoint.y },\n      ] as Point[];\n    }\n\n    if (this.type === 'J') {\n      return [\n        pivotPoint,\n        { x: pivotPoint.x - 1, y: pivotPoint.y + 1 },\n        { x: pivotPoint.x - 1, y: pivotPoint.y },\n        { x: pivotPoint.x + 1, y: pivotPoint.y },\n      ] as Point[];\n    }\n\n    if (this.type === 'L') {\n      return [\n        pivotPoint,\n        { x: pivotPoint.x - 1, y: pivotPoint.y },\n        { x: pivotPoint.x + 1, y: pivotPoint.y },\n        { x: pivotPoint.x + 1, y: pivotPoint.y + 1 },\n      ] as Point[];\n    }\n\n    if (this.type === 'O') {\n      return [\n        pivotPoint,\n        { x: pivotPoint.x - 1, y: pivotPoint.y + 1 },\n        { x: pivotPoint.x , y: pivotPoint.y + 1 },\n        { x: pivotPoint.x - 1, y: pivotPoint.y },\n      ] as Point[];\n    }\n\n    if (this.type === 'S') {\n      return [\n        pivotPoint,\n        { x: pivotPoint.x - 1, y: pivotPoint.y },\n        { x: pivotPoint.x , y: pivotPoint.y + 1 },\n        { x: pivotPoint.x + 1 , y: pivotPoint.y + 1 },\n      ] as Point[];\n    }\n\n    if (this.type === 'T') {\n      return [\n        pivotPoint,\n        { x: pivotPoint.x - 1, y: pivotPoint.y },\n        { x: pivotPoint.x + 1, y: pivotPoint.y },\n        { x: pivotPoint.x, y: pivotPoint.y + 1 },\n      ] as Point[];\n    }\n\n    return [\n      pivotPoint,\n      { x: pivotPoint.x - 1, y: pivotPoint.y + 1 },\n      { x: pivotPoint.x, y: pivotPoint.y + 1 },\n      { x: pivotPoint.x + 1, y: pivotPoint.y },\n    ] as Point[];\n  }\n\n  private isMovingToPointsPossible(...points: Point[]) {\n    return points.every((point) => {\n      if (this.brickContext.checkIfPointIsOutOfRange(point)) return false;\n\n      if (!this.brickContext.checkIfBrickAtPoint(point)) return true;\n\n      const brickAtPoint = this.brickContext.getBrickByPoint(point);\n\n      return this.bricks.includes(brickAtPoint);\n    });\n  }\n\n  private getMovingDownNextPoints() {\n    return this.bricks.map((brick) => ({ x: brick.point.x, y: brick.point.y - 1 }));\n  }\n\n  private getMovingRightNextPoints() {\n    return this.bricks.map((brick) => ({ x: brick.point.x + 1, y: brick.point.y }));\n  }\n\n  private getMovingLeftNextPoints() {\n    return this.bricks.map((brick) => ({ x: brick.point.x - 1, y: brick.point.y }));\n  }\n\n  private getRotatingRightNextPoints() {\n    return this.bricks.map((brick) => this.getRotatedPoint(this.pivotBrick.point, brick.point, -90));\n  }\n\n  private getRotatingLeftNextPoints() {\n    return this.bricks.map((brick) => this.getRotatedPoint(this.pivotBrick.point, brick.point, +90));\n  }\n\n  private getRotatedPoint(originPoint: Point, point: Point, angle: number) {\n    const x = Math.round(originPoint.x + Math.cos(angle * (Math.PI / 180)) * (point.x - originPoint.x) - Math.sin(angle * (Math.PI / 180)) * (point.y - originPoint.y));\n    const y = Math.round(originPoint.y + Math.sin(angle * (Math.PI / 180)) * (point.x - originPoint.x) + Math.cos(angle * (Math.PI / 180)) * (point.y - originPoint.y));\n    return { x, y };\n  }\n}\n","import { State } from './types';\n\nexport const states: { [state in State]: state } = {\n  'initial': 'initial',\n  'running': 'running',\n  'paused': 'paused',\n  'finished': 'finished',\n};","import { colors } from '../../components/Cell/constants';\nimport { BrickContext } from '../BrickContext';\nimport { BrickHeap } from '../BrickHeap';\nimport { Deferred } from '../Deferred';\nimport { Field } from '../Field';\nimport { Interval } from '../Interval';\nimport { KeyController } from '../KeyController';\nimport { Tetromino } from '../Tetromino';\nimport { TetrominoGenerator } from '../TetrominoGenerator';\nimport { states } from './constants';\nimport { ClearRowsHandler, FinishHandler, Options, PauseHandler, RunHandler, State } from './types';\n\nexport class GameScenario {\n  private state: State = states.initial;\n\n  private falling = false;\n\n  private numberOfFilledLines = 0;\n  \n  private brickContext: BrickContext;\n\n  private brickHeap: BrickHeap;\n\n  private field: Field;\n\n  private tetrominoGenerator: TetrominoGenerator;\n  \n  private currentTetromino: Tetromino | null = null;\n\n  private interval = new Interval();\n\n  private keyController = new KeyController();\n\n  private pauseDeferred: Deferred | null = null;\n\n  private onRun: RunHandler | null = null\n\n  private onPause: PauseHandler | null = null;\n\n  private onClearRows: ClearRowsHandler | null = null;\n\n  private onFinish: FinishHandler | null = null;\n\n  constructor(options: Options) {\n    this.field = options.field;\n    this.brickContext = options.brickContext;\n    this.brickHeap = options.brickHeap;\n    this.tetrominoGenerator = options.tetrominoGenerator;\n    this.onRun = options.onRun ?? null;\n    this.onPause = options.onPause ?? null;\n    this.onClearRows = options.onClearRows ?? null;\n    this.onFinish = options.onFinish ?? null;\n  }\n\n  async run() {    \n    if (this.state === states.paused) {\n      this.onRun?.();\n      this.resume();\n      return;\n    }\n\n    if (this.state === states.running) return;\n\n    if (this.state === states.finished) {\n      this.brickContext.clear();\n      this.brickHeap.clear();\n      this.numberOfFilledLines = 0;\n      this.draw();\n    }\n\n    this.onRun?.();\n    this.start();\n  }\n\n  pause() {\n    if (this.state === states.paused) return;\n\n    this.onPause?.();\n    this.state = states.paused;\n    this.pauseDeferred = new Deferred();\n    this.keyController.stopListening();\n    this.interval.stop();\n  }\n\n  private async start() {\n    this.state = states.running;\n\n    this.tetrominoGenerator.create();\n\n    do {\n      await this.pauseDeferred?.promise;\n      this.currentTetromino = new Tetromino({\n        type: this.tetrominoGenerator.currentData!.type,\n        color: this.tetrominoGenerator.currentData!.color,\n        brickContext: this.brickContext,\n      });\n      await this.runTetrominoFalling();\n      this.tetrominoGenerator.generateNext();\n    } while (!this.field.isFilled());\n\n    this.state = states.finished;\n    this.onFinish?.();\n  }\n\n  private resume() {\n    if (this.state !== states.paused) return;\n\n    this.state = states.running;\n    this.pauseDeferred?.resolve();\n    this.pauseDeferred = null;\n\n    if (this.falling) {\n      this.keyController.startListening();\n      this.interval.start();\n    }\n  }\n\n  private async runTetrominoFalling() {\n    this.falling = true;\n    const tetromino = this.currentTetromino!;\n\n    this.interval.setDuration(\n      this.numberOfFilledLines === 100 ? 10 : 1000 - 10 * this.numberOfFilledLines\n    );\n\n    await Promise.race([\n      new Promise<void>((resolve) => {\n        this.keyController.setListeners({\n          onArrowUpPress: () => {\n            tetromino.rotateRight();\n            this.draw();\n          },\n          onArrowDownPress: () => {\n            if (tetromino.isMovingDownPossible()) {\n              tetromino.moveDown();\n              this.draw();\n            } else {\n              resolve();\n            }\n          },\n          onArrowRightPress: () => {\n            tetromino.moveRight();\n            this.draw();\n          },\n          onArrowLeftPress: () => {\n            tetromino.moveLeft();\n            this.draw();\n          },\n        });\n        this.keyController.startListening();\n      }),\n      new Promise<void>((resolve) => {\n        this.interval.setCallback(() => {\n          if (tetromino.isMovingDownPossible()) {\n            tetromino.moveDown();\n            this.draw();\n          } else {\n            resolve();\n          }\n        });\n        this.interval.start();\n      }),\n    ]);\n\n    this.falling = false;\n    this.keyController.stopListening();\n    this.interval.stop();\n    this.brickHeap.addBricks(...tetromino.bricks);\n    await this.clearRowsIfNeeded();\n  }\n\n  private draw() {\n    this.field.cells.forEach((cell) => {\n      if (this.brickContext.checkIfBrickAtPoint(cell.point)) {\n        const brick = this.brickContext.getBrickByPoint(cell.point);\n        cell.changeColor(brick.color);\n        return;\n      }\n\n      cell.changeColor(colors.empty);\n    });\n  }\n\n  private async clearRowsIfNeeded() {\n    const rows = this.brickHeap.getFilledRows()\n      .map((bricks) => bricks.sort((prev, next) => prev.point.x - next.point.x));\n\n    if (rows.length === 0) return;\n\n    this.numberOfFilledLines += rows.length;\n    this.onClearRows?.({ numberOfRows: rows.length });\n\n    const rowWidth = this.brickContext.size.width;\n\n    for (let x = rowWidth / 2 - 1; x >= 0; x--) {\n      const leftX = x;\n      const rightX = rowWidth - leftX - 1;\n\n      rows.forEach((rowBricks) => {\n        const leftBrick = rowBricks[leftX];\n        const rightBrick = rowBricks[rightX];\n        this.brickContext.removeBricks(leftBrick, rightBrick);\n        this.brickHeap.removeBricks(leftBrick, rightBrick);\n      });\n\n      this.draw();\n\n      await new Promise((resolve) => setTimeout(resolve, 100));\n    }\n\n    this.brickHeap.moveToBottom();\n    this.draw();\n  }\n}\n","import { omit, sample } from 'lodash';\nimport { makeAutoObservable } from 'mobx';\nimport { colors } from '../../components/Cell/constants';\nimport { Color } from '../../components/Cell/types';\nimport { types } from '../../components/Tetromino/constants';\nimport { Type } from '../../components/Tetromino/types';\n\nexport class TetrominoGenerator {\n  private _currentData: { color: Color; type: Type } | null = null;\n\n  private _nextData: { color: Color; type: Type } | null = null;\n\n  constructor() {\n    makeAutoObservable(this, {}, { autoBind: true });\n  }\n\n  get currentData() {\n    return this._currentData;\n  }\n\n  get nextData() {\n    return this._nextData;\n  }\n\n  create() {\n    this._currentData = this.getRandomData();\n    this._nextData = this.getRandomData();\n  }\n\n  generateNext() {\n    this._currentData = this.nextData;\n    this._nextData = this.getRandomData();\n  }\n\n  private getRandomData() {\n    return {\n      color: sample(omit(colors, 'empty'))!,\n      type: sample(types)!,\n    };\n  }\n}\n","import { Size } from '../../types';\nimport { BrickContext } from '../BrickContext';\nimport { BrickHeap } from '../BrickHeap';\nimport { Field } from '../Field';\nimport { GameScenario } from '../GameScenario';\nimport { TetrominoGenerator } from '../TetrominoGenerator';\nimport { Options } from './types';\n\nexport class Tetris {\n  private _field = new Field(Tetris.defaultFieldSize);\n\n  private brickContext = new BrickContext({ size: { width: 10, height: 20 } });\n  \n  private brickHeap = new BrickHeap({ brickContext: this.brickContext });\n\n  private tetrominoGenerator = new TetrominoGenerator();\n\n  private gameScenario: GameScenario;\n  \n  private static defaultFieldSize: Size = { width: 10, height: 20 };\n\n  constructor(options?: Options) {\n    this.gameScenario = new GameScenario({\n      field: this._field,\n      brickContext: this.brickContext,\n      brickHeap: this.brickHeap,\n      tetrominoGenerator: this.tetrominoGenerator,\n      onRun: options?.onRun,\n      onPause: options?.onPause,\n      onClearRows: options?.onClearRows,\n      onFinish: options?.onFinish,\n    });\n  }\n\n  get field() {\n    return this._field;\n  }\n\n  get nextPieceData() {\n    return this.tetrominoGenerator.nextData;\n  }\n\n  run() {\n    this.gameScenario.run();\n  }\n\n  pause() {\n    this.gameScenario.pause();\n  }\n}\n","import { makeAutoObservable } from 'mobx';\nimport { Button } from '../Button';\nimport { states } from '../Button/constants';\nimport { Counter } from '../Counter';\nimport { Tetris } from '../Tetris';\n\nexport class TetrisStore {\n  private tetris = new Tetris({\n    onRun: () => this._button.setState(states.pause),\n    onPause: () => this._button.setState(states.resume),\n    onClearRows: ({ numberOfRows }) => this._counter.incrementLines(numberOfRows),\n    onFinish: () => this._button.setState(states.play),\n  });\n\n  private _button = new Button({\n    onClick: () => {\n      if (this._button.state === states.pause) {\n        this.tetris.pause();\n      } else {\n        this.tetris.run();\n      }\n    },\n  });\n\n  private _counter = new Counter();\n\n  constructor() {\n    makeAutoObservable(this, {}, { autoBind: true });\n  }\n\n  get field() {\n    return this.tetris.field;\n  }\n\n  get nextPiece() {\n    return this.tetris.nextPieceData;\n  }\n\n  get button() {\n    return {\n      text: this.buttonText,\n      onClick: this._button.onClick,\n    };\n  }\n\n  get scores() {\n    return this._counter.scores\n  }\n\n  get lines() {\n    return this._counter.numberOfLines;\n  }\n\n  private get buttonText() {\n    if (this._button.state === states.pause) {\n      return 'PAUSE';\n    }\n    \n    if (this._button.state === states.resume) {\n      return 'RESUME';\n    }\n\n    return 'PLAY';\n  }\n}\n","import React from 'react';\nimport { observer, useLocalObservable } from 'mobx-react';\nimport { Global } from '../Global';\nimport { Cell } from './binders/Cell';\nimport { BoxContainer } from './components/BoxContainer';\nimport { Button } from './components/Button';\nimport { Field } from './components/Field';\nimport { Tetromino } from './components/Tetromino';\nimport { TetrisStore } from './store/TetrisStore';\nimport style from './index.module.scss';\n\nexport const Tetris = observer(function Tetris() {\n  const store = useLocalObservable(() => new TetrisStore());\n\n  return (\n    <Global>\n      <div className={style.main}>\n        <div className={style.fieldWrap}>\n          <Field>\n            {store.field.cells.map((cell) => (\n              <Cell key={`${cell.point.x}-${cell.point.y}`} cell={cell} />\n            ))}\n          </Field>\n        </div>\n        <div className={style.center}>\n          <div className={style.column}>\n            <div className={style.nextPieceBoxContainer}>\n              <BoxContainer text=\"NEXT PIECE\">\n                <div className={style.nextPieceBoxContainerInner}>\n                  {store.nextPiece && (\n                    <Tetromino\n                      type={store.nextPiece.type}\n                      color={store.nextPiece.color}\n                    />\n                  )}\n                </div>\n              </BoxContainer>\n            </div>\n            <div>\n              <div className={style.fieldText}>SCORES:</div>\n              <div className={style.fieldValue}>{store.scores}</div>\n            </div>\n            <br/>\n            <div>\n              <div className={style.fieldText}>LINES:</div>\n              <div className={style.fieldValue}>{store.lines}</div>\n            </div>\n            <div className={style.buttonWrap}>\n              <Button onClick={store.button.onClick}>{store.button.text}</Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Global>\n  );\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Tetris } from './components/Tetris';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Tetris />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Tetris_main__8hQGV\",\"fieldWrap\":\"Tetris_fieldWrap__1WixQ\",\"center\":\"Tetris_center__1XFfi\",\"column\":\"Tetris_column__2w8l9\",\"nextPieceBoxContainer\":\"Tetris_nextPieceBoxContainer__2FFUZ\",\"nextPieceBoxContainerInner\":\"Tetris_nextPieceBoxContainerInner__QCvWs\",\"buttonWrap\":\"Tetris_buttonWrap__RavN5\",\"fieldText\":\"Tetris_fieldText__3vATx\",\"fieldValue\":\"Tetris_fieldValue__3DZjK\"};"],"sourceRoot":""}